//GVF.cxx
//Author: Amit Mukherjee 

// Edited: Prathamesh


// Pre-processing steps:
// 1. Median filtering with kernel - itk::Size<3> sz = {1,1,1};
// 2. Flat field correction - not done by this code as mentioned in the thsis
// 3. Curvature anisotropic diffusion 

#include "itkTimeProbe.h"
#include "itkImage.h"
#include "itkCovariantVector.h"
#include "itkImageFileReader.h"
#include "itkImageFileWriter.h"
#include "itkMedianImageFilter.h"

#include "itkImageRegionIterator.h"
#include "itkRescaleIntensityImageFilter.h"
#include "itkShapedNeighborhoodIterator.h"
#include "itkSmoothingRecursiveGaussianImageFilter.h"
#include "itkDiscreteGaussianImageFilter.h"
#include "itkGradientMagnitudeRecursiveGaussianImageFilter.h"
#include "itkDiscreteGaussianImageFilter.h"

#include <fstream>

#define EPS 0.001   
inline double EpsilonClip(double x) {
	if ( vnl_math_abs(x) < EPS ) {
		x = (x < 0.0) ? -1*EPS : EPS ;
	}
	return (x);
}

inline float EpsilonClip(float x) {
	if ( vnl_math_abs(x) < EPS ) {
		x = (x < 0.0) ? -1*EPS : EPS ;
	}
	return (x);
}


typedef float PixelType;
typedef itk::Image< PixelType, 3 >	ImageType3D;

void ReadImage3D(std::string fname, ImageType3D::Pointer& vol );
void WriteImage3D(std::string fname, ImageType3D::Pointer& vol);
void WriteTiffImage3D(std::string fname, ImageType3D::Pointer& vol);
void CurveAnisDiff( ImageType3D::Pointer& vol);
void GVDiffusionFinal(ImageType3D::Pointer& , std::string, bool );


/*int main (int argc, char * argv[])	{
	std::cout << std::endl<< "Preprocessing stage..." << std::endl;
	if (argc < 3) 	{
		std::cerr << "!!! Incorrect Input Arguments !!! "<<std::endl;
		std::cerr << "Usage : "<< argv[0] << " InputImageFileName OutputImageFileName "<< std::endl;
		return EXIT_FAILURE;
	}

	itk::TimeProbe timer;
	timer.Start();

	ImageType3D::Pointer vol;
	try     {
		ReadImage3D(std::string(argv[1]), vol); //Returns a median filtered image in vol
	}
	catch( itk::ExceptionObject & e )    {
		std::cout << e << std::endl;
		return EXIT_FAILURE;
    }

    bool DoNorm = false;

	CurveAnisDiff(vol); // Curvature anisotropic diffusion filter
	
	typedef itk::RescaleIntensityImageFilter<ImageType3D, ImageType3D> RescalerType;
	RescalerType::Pointer rescaler = RescalerType::New();
	rescaler->SetOutputMinimum(0.0);
	rescaler->SetOutputMaximum(1.0);
	rescaler->SetInput(vol);
	rescaler->Update();
	vol = rescaler->GetOutput();
	
    // Calculate gradient vector diffusion and write the images to disk
    std::cout << "GVF Computation" << std::endl;
	GVDiffusionFinal(vol, std::string(argv[2]), DoNorm);
	timer.Stop();
	std::cout << "The processing took " << timer.GetMeanTime() << " seconds. " << std::endl;

	return EXIT_SUCCESS;

}*/

///////////////////////////////////////////////////////////////////////////////

void GVDiffusionFinal(ImageType3D::Pointer&  vol, std::string fname, bool DoNorm = false) {
	
    typedef itk::GradientMagnitudeRecursiveGaussianImageFilter< ImageType3D, ImageType3D > GradFilterType;
	GradFilterType::Pointer smfilt = GradFilterType::New();
	smfilt->SetInput(vol);
	smfilt->SetSigma(2.0f);
	smfilt->Update();
	ImageType3D::Pointer aof = smfilt->GetOutput();
	aof->Update();

	itk::ImageRegionIterator<ImageType3D> ait(aof, aof->GetBufferedRegion());
	
    // Calculate min and max of the dataset
	float mx = -1000.0f, mn = 1000.0f;
    for (ait.GoToBegin(); !ait.IsAtEnd(); ++ait ) {
		mx = vnl_math_max(mx,ait.Get());
		mn = vnl_math_min(mn,ait.Get());
	}
	std::cout << "max : " << mx << "min : " << mn << std::endl;

	for (ait.GoToBegin(); !ait.IsAtEnd(); ++ait ) {
		float d = ait.Get();
		d = (d - mn)/(mx - mn);
		d = vcl_pow(d,2.0f);
		ait.Set(d);
	}

	//initialize gx, gy, gz
	ImageType3D::Pointer gx = ImageType3D::New();	gx->SetRegions(vol->GetBufferedRegion());	gx->Allocate();
	ImageType3D::Pointer gy = ImageType3D::New();	gy->SetRegions(vol->GetBufferedRegion());	gy->Allocate();
	ImageType3D::Pointer gz = ImageType3D::New();	gz->SetRegions(vol->GetBufferedRegion());	gz->Allocate();
	ImageType3D::Pointer g1x = ImageType3D::New();	g1x->SetRegions(vol->GetBufferedRegion());	g1x->Allocate();
	ImageType3D::Pointer g1y = ImageType3D::New();	g1y->SetRegions(vol->GetBufferedRegion());	g1y->Allocate();
	ImageType3D::Pointer g1z = ImageType3D::New();	g1z->SetRegions(vol->GetBufferedRegion());	g1z->Allocate();
    
    // These are the derivatives in x, y, and z directions?
	itk::Size<3> rad = {{1,1,1}};
	itk::ImageRegionIterator<ImageType3D> xit(gx, gx->GetBufferedRegion());
	itk::ImageRegionIterator<ImageType3D> yit(gy, gy->GetBufferedRegion());
	itk::ImageRegionIterator<ImageType3D> zit(gz, gz->GetBufferedRegion());

    // Calculating the derivative image?
	itk::NeighborhoodIterator<ImageType3D> vnit(rad , aof, aof->GetBufferedRegion());
	for (vnit.GoToBegin(), xit.GoToBegin(), yit.GoToBegin(), zit.GoToBegin(); !vnit.IsAtEnd(); ++vnit, ++xit, ++yit, ++zit)	{
		float dx = EpsilonClip(0.5*(vnit.GetNext(0) - vnit.GetPrevious(0)));
		float dy = EpsilonClip(0.5*(vnit.GetNext(1) - vnit.GetPrevious(1)));
		float dz = EpsilonClip(0.5*(vnit.GetNext(2) - vnit.GetPrevious(2)));

		xit.Set(dx);
		yit.Set(dy);
		zit.Set(dz);
	}

	itk::Size<3> sz = aof->GetBufferedRegion().GetSize();
    
    // How is this kernel derived? and what is it meant for?
	const double filter[27] = {	0.0206, 0.0339, 0.0206,  0.0339, 0.0560, 0.0339,  0.0206, 0.0339, 0.0206,  \
									0.0339, 0.0560, 0.0339,  0.0560, 0.0923, 0.0560,  0.0339, 0.0560, 0.0339,  \
	                                0.0206, 0.0339, 0.0206,  0.0339, 0.0560, 0.0339,  0.0206, 0.0339, 0.0206   \
								};

	for (int iter = 0; iter < 30; ++iter) {

		double update = 0.0;
		for (long k=1; k<sz[2]-1; ++k) {
			for (long j=1; j<sz[1]-1; ++j) {
				for (long i=1; i<sz[0]-1; ++i)	{

					itk::Index<3> ndx = {i,j,k};

					double dx = double(gx->GetPixel(ndx)), dy = double(gy->GetPixel(ndx)), dz = double(gz->GetPixel(ndx));
					double g = (dx*dx) + (dy*dy) + (dz*dz) + EPS; 

                    // Application of the above filter
					double d1x = 0.0f, d1y = 0.0f, d1z = 0.0f;
					int f = 0;
					for (long kk = k-1; kk <= k+1 ; ++kk) {
						for (long jj = j-1; jj <= j+1 ; ++jj) {
							for (long ii = i-1; ii <= i+1 ; ++ii) {
								itk::Index<3> ndx1 = {ii,jj,kk};
								d1x += double(gx->GetPixel(ndx1))*filter[f];
								d1y += double(gy->GetPixel(ndx1))*filter[f];
								d1z += double(gz->GetPixel(ndx1))*filter[f];
								++f;
							}
						}
					}

					double g1 = (d1x*d1x) + (d1y*d1y) + (d1z*d1z) + EPS;

					if (g1 > g )  {
						g1x->SetPixel(ndx,float(d1x));
						g1y->SetPixel(ndx,float(d1y));
						g1z->SetPixel(ndx,float(d1z));
						update += (g1 - g);
					}
					else {
						g1x->SetPixel(ndx,float(dx));
						g1y->SetPixel(ndx,float(dy));
						g1z->SetPixel(ndx,float(dz));
						g1 = g;
					}
				}
			}
		}

		std::cout << "Iter # " << iter << " Update :" << update << std::endl;

		for (long k=1; k<sz[2]-1; ++k) {
			for (long j=1; j<sz[1]-1; ++j) {
				for (long i=1; i<sz[0]-1; ++i)	{
					itk::Index<3> ndx = {i,j,k};
						gx->SetPixel(ndx,g1x->GetPixel(ndx));
						gy->SetPixel(ndx,g1y->GetPixel(ndx));
						gz->SetPixel(ndx,g1z->GetPixel(ndx));
				}
			}
		}
	}
    // Wirte the gradient images and the vol image to disk
	WriteImage3D(fname + std::string("_gx.mhd"),gx);
	WriteImage3D(fname + std::string("_gy.mhd"),gy);
	WriteImage3D(fname + std::string("_gz.mhd"),gz);
	WriteImage3D(fname + std::string(".mhd"),vol);
}


///////////////////////////////////////////////////////////////////////////////
void CurveAnisDiff( ImageType3D::Pointer& vol)	{
  itk::Size<3>  rad;
  rad.Fill(1);

  typedef itk::DiscreteGaussianImageFilter<ImageType3D, ImageType3D> GaussType;
  GaussType::Pointer gauss = GaussType::New();
  gauss->SetVariance(2);
  gauss->SetUseImageSpacingOn();

  itk::ImageRegionIterator<ImageType3D> itv(vol, vol->GetBufferedRegion());

  // Finding the extrema of the vol data  
  float maxVal = -1000.00;
  float minVal = 1000.00;
  for (itv.GoToBegin(); !itv.IsAtEnd(); ++itv)	{
	  maxVal = (itv.Get() < maxVal) ? maxVal : itv.Get();
	  minVal = (itv.Get() > minVal) ? minVal : itv.Get();
  }

  //temp = vol
  ImageType3D::Pointer temp = ImageType3D::New();
  temp->SetRegions(vol->GetBufferedRegion());
  temp->Allocate();

  ImageType3D::Pointer svol = ImageType3D::New();
  svol->SetRegions(vol->GetBufferedRegion());
  svol->Allocate();
  itk::ImageRegionIterator<ImageType3D> sit(svol, svol->GetBufferedRegion());
  itk::NeighborhoodIterator<ImageType3D> it(rad, svol, svol->GetBufferedRegion());


  //itk::Offset<3> f100 = {{-1,0,0}}, f010 = {{0,-1,0}}, f210 = {{-1,0, 1}}, f120 = {{ }}, f110 = {{ }},

  unsigned int IterCount = 10; //why 10??
  const float K = (maxVal - minVal)/30.0; //why 30?? Is this conductance?
  std::cout << "K = " << K << std::endl;
  float zAspectRatio = vol->GetSpacing()[2]/vol->GetSpacing()[1];
  std::cout << "Z Aspect Ratio = " << zAspectRatio << std::endl;

  while (IterCount > 0)	{

      // copying data from vol to temp?  
	  for (itv.GoToBegin(), sit.GoToBegin(); !itv.IsAtEnd(); ++itv, ++sit)	{
		  float val = itv.Get();
		  sit.Set(val);
	  }

	  //WriteFloatImage3D(std::string("DiscreteGaussSmoothing.mhd"), svol);
	  float dxf, dxb, dyf, dyb, dzf, dzb, dx, dy, dz;
	  float gxf, gxb, gyf, gyb, gzf, gzb;
	  float od1, od2;
	  float propagation_gradient, speed;

      // Curvature anisotropic diffusion filter implementation - Why not use the one in ITK?  
	  for (itv.GoToBegin(), it.GoToBegin(); !itv.IsAtEnd(); ++itv, ++it)	{
			//if (it.InBounds())	{
				  // 6 7 8    15 16 17   24 25 26
				  // 3 4 5    12 13 14   21 22 23
				  // 0 1 2    9  10 11   18 19 20
				dx = it.GetPixel(14) - it.GetPixel(12);
				dxf = it.GetPixel(14) - it.GetPixel(13);
				dxb = it.GetPixel(13) - it.GetPixel(12);
				dy = it.GetPixel(10) - it.GetPixel(16);
				dyf = it.GetPixel(16) - it.GetPixel(13);
				dyb = it.GetPixel(13) - it.GetPixel(10);
				dz = (it.GetPixel(4) - it.GetPixel(22))/zAspectRatio;
				dzf = (it.GetPixel(22) - it.GetPixel(13))/zAspectRatio;
				dzb = (it.GetPixel(13) - it.GetPixel(22))/zAspectRatio;

				  //x	12, 14
				od1 = it.GetPixel(17) - it.GetPixel(11);
				od2 = (it.GetPixel(23) - it.GetPixel(5))/zAspectRatio;
				gxf = vcl_sqrt(dxf*dxf + 0.25*(od1 + dy)*(od1 + dy) + 0.25*(od2 + dz)*(od2 + dz)) + 0.000001;

				od1 = it.GetPixel(15) - it.GetPixel(9);
				od2 = (it.GetPixel(21) - it.GetPixel(3))/zAspectRatio;
				gxb = vcl_sqrt(dxb*dxb + 0.25*(od1 + dy)*(od1 + dy) + 0.25*(od2 + dz)*(od2 + dz)) + 0.000001;

				  //y	16, 10
				od1 = it.GetPixel(17) - it.GetPixel(15);
				od2 = (it.GetPixel(25) - it.GetPixel(7))/zAspectRatio;
				gyf = vcl_sqrt(0.25*(od1 + dx)*(od1 + dx) + dyf*dyf + 0.25*(od2 + dz)*(od2 + dz)) + 0.000001;

				od1 = it.GetPixel(11) - it.GetPixel(9);
				od2 = (it.GetPixel(19) - it.GetPixel(1))/zAspectRatio;
				gyb = vcl_sqrt(0.25*(od1 + dx)*(od1 + dx) + dyb*dyb + 0.25*(od2 + dz)*(od2 + dz)) + 0.000001;

				  //z	4, 22
				od1 = it.GetPixel(23) - it.GetPixel(21);
				od2 = it.GetPixel(25) - it.GetPixel(19);
				gzf = vcl_sqrt(0.25*(od1 + dx)*(od1 + dx) + 0.25*(od2 + dy)*(od2 + dy) + dzf*dzf) + 0.000001;

				od1 = it.GetPixel(5) - it.GetPixel(3);
				od2 = it.GetPixel(7) - it.GetPixel(1);
				gzb = vcl_sqrt(0.25*(od1 + dx)*(od1 + dx) + 0.25*(od2 + dy)*(od2 + dy) + dzb*dzb) + 0.000001;

				speed = (dxf / gxf * vcl_exp( -1*gxf / K )) - (dxb / gxb * vcl_exp( -1*gxb / K ) )
					  + (dyf / gyf * vcl_exp( -1*gyf / K )) - (dyb / gyb * vcl_exp( -1*gyb / K ) )
					  + (dzf / gzf * vcl_exp( -1*gzf / K )) - (dzb / gzb * vcl_exp( -1*gzb / K ) );


				if (speed > 0)	{
					propagation_gradient = vnl_math_sqr( vnl_math_min(dxb, 0.0f) ) + vnl_math_sqr( vnl_math_max(dxf,  0.0f) ) +
						vnl_math_sqr( vnl_math_min(dyb, 0.0f) ) + vnl_math_sqr( vnl_math_max(dyf,  0.0f) ) +
						vnl_math_sqr( vnl_math_min(dzb, 0.0f) ) + vnl_math_sqr( vnl_math_max(dzf,  0.0f) );
				}
				  else	{
					propagation_gradient = vnl_math_sqr( vnl_math_max(dxb, 0.0f) ) + vnl_math_sqr( vnl_math_min(dxf,  0.0f) ) +
						vnl_math_sqr( vnl_math_max(dyb, 0.0f) ) + vnl_math_sqr( vnl_math_min(dyf,  0.0f) ) +
						vnl_math_sqr( vnl_math_max(dzb, 0.0f) ) + vnl_math_sqr( vnl_math_min(dzf,  0.0f) );
				}

				float val = itv.Get() + 0.1 * vcl_sqrt(propagation_gradient) * speed ;
				val = vnl_math_max(val,minVal);
				val = vnl_math_min(val,maxVal);
				itv.Set( val );
				temp->SetPixel(itv.GetIndex(),  vcl_sqrt(propagation_gradient) * speed);
			//}
		}
	  //WriteFloatImage3D(std::string("curveUpdates.mhd"), temp);
	  std::cout << "Completed Iteration " << IterCount << std::endl;
	  IterCount--;
	  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
void WriteTiffImage3D(std::string fname, ImageType3D::Pointer& vol)	{
	fname = fname + std::string(".tif");
	std::cout << "Writing output file "<< fname << std::endl;
	typedef itk::Image<unsigned char, 3> CharImageType3D;
	typedef itk::RescaleIntensityImageFilter<ImageType3D, CharImageType3D> RescalerType;
	RescalerType::Pointer rescaler = RescalerType::New();
	rescaler->SetOutputMinimum(0);
	rescaler->SetOutputMaximum(255);
	rescaler->SetInput(vol);
	typedef itk::ImageFileWriter<CharImageType3D> WriterType;
	//typedef itk::ImageFileWriter<ImageType3D> WriterType;
	WriterType::GlobalWarningDisplayOff();
	WriterType::Pointer writer = WriterType::New();
	writer->SetFileName(fname);
	writer->SetInput(rescaler->GetOutput());
	//writer->SetInput(vol);
	writer->Update();
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void ReadImage3D(std::string fname, ImageType3D::Pointer& vol )	{
	std::cout << "Reading input file "<< fname << std::endl;
	typedef itk::ImageFileReader<ImageType3D> ReaderType;
	ReaderType::GlobalWarningDisplayOff();
	ReaderType::Pointer reader = ReaderType::New();
	reader->SetFileName(fname);

    //Median filtering 
	itk::MedianImageFilter<ImageType3D,ImageType3D>::Pointer medfilt = itk::MedianImageFilter<ImageType3D,ImageType3D>::New();
	itk::Size<3> sz = {1,1,1};
	medfilt->SetRadius(sz);
	medfilt->SetInput(reader->GetOutput());

	typedef itk::RescaleIntensityImageFilter<ImageType3D, ImageType3D> RescalerType;
	RescalerType::Pointer rescaler = RescalerType::New();
	rescaler->SetOutputMinimum(0.0);
	rescaler->SetOutputMaximum(1.0);
	rescaler->SetInput(medfilt->GetOutput());

	vol = rescaler->GetOutput();
	vol->Update();	 
	std::cout << "Input file size: "<< vol->GetBufferedRegion().GetSize() << std::endl;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void WriteImage3D(std::string fname, ImageType3D::Pointer& vol)	{
	std::cout << "Writing output file "<< fname << std::endl;
	typedef itk::ImageFileWriter<ImageType3D> WriterType;
	WriterType::GlobalWarningDisplayOff();
	WriterType::Pointer writer = WriterType::New();
	writer->SetFileName(fname);
	writer->SetInput(vol);
	writer->Update();
}